#!/bin/bash

log() { echo "$1" >&2; }
die() { log "$1"; exit 1; }

build_system="$1"

# .ccls
if [ -f '.ccls' ]; then
    log '.ccls exists'
else

echo -e 'clang
%c -std=c11 -Wall -Wextra
%cpp -std=c++17 -Wall -Wextra' > '.ccls' \
&& log 'created .ccls' \
|| die 'failed to create .ccls'

fi

# compile_commands.json
if [ -f 'compile_commands.json' ]; then
    log 'compile_commands.json exists'
else

touch 'compile_commands.json' \
&& log 'created compile_commands.json' \
|| die 'failed to create compile_commands.json'

fi

# makefile
if [ -z "$build_system" ]; then
    exit 0
fi

if [ -f 'Makefile' ]; then
    log 'Makefile exists'
else

if [ "$build_system" = 'qmake' ]; then
    log 'qmake selected'
else
    die 'unknown build system'
fi

project_file="$(echo *.pro)"

if [ "$(echo "$project_file" | wc -w)" -ne 1 ]; then
    die 'no or too many .pro files found'
fi

build_output="$(echo "$project_file" | sed 's/\.pro$//')"
log "build output: $build_output"

echo -e "build/${build_output}:
\t@cd build && \\
\tqmake CONFIG+=debug .. && \\
\tbear -o ../compile_commands.json make -j
clean:
\t@cd build && make clean
.PHONY: clean" > Makefile \
&& log 'created Makefile' \
|| die 'failed to create Makefile'

fi

# build directory
mkdir -p 'build'
