#!/bin/zsh

alias reload="echo 'Reloading ${SHELL}...'; exec $SHELL -l"
alias path='echo -e ${PATH//:/\\n}'
alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles/.git --work-tree=$HOME'

# FLAGS ----------------------------------------------------------------------------------
alias cp='cp -iv'
alias rscp='rsync -avhP'
alias mv='mv -iv'
alias mkd='mkdir -p'
alias df='df -h'
alias du='du -h'
alias dmesg='dmesg -T'
alias cal='ncal -b3'
alias bc='bc -q'
alias mount='mount -v'
alias umount='umount -v'
alias wget='wget --hsts-file ~/.cache/wget-hsts'
alias zathura='zathura --fork'

# CD -------------------------------------------------------------------------------------
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

function .f {
    list="$(pwd | sed 's#/#\n#g' | tac | awk 'NR > 1 {print NR-1 "\t" $0 "/"}')"
    res="$(echo "$list" | fzf --reverse --height=$(($(echo "$list" | wc -l) + 2)))" \
        || return 0
    cd "$(printf '../%.0s' $(seq 1 $(echo "$res" | cut -f 1)))"
}

function mkcd {
    if (( ARGC != 1 )); then
        echo 'usage: mkcd <directory>' >&2
        return 1
    fi
    [[ ! -d "$1" ]] && mkdir -pv "$1"
    cd "$1"
}

function dev {
    res="$(
        fd -H -t d \
                -E '.git' \
                -E 'build' \
                -E '.cache' \
                -E '.clangd' \
                -E 'zig-cache' \
                -E 'CMakeFiles' \
                -E '.mypy_cache' \
                . ~/dev \
            | fzf --reverse --height=50%)" \
        && cd "$res"
}

function pro {
    res="$(
        cd "${1:-.}" && \
        fd -H -t d '^\.git$' . -x echo {//} \
            | fzf --reverse --height=50%)" \
        && cd "${1:-.}/$res"
}

alias mm='pro ~/dev/mm'

# LS -------------------------------------------------------------------------------------
alias ls='ls -hN --color=auto --group-directories-first'
alias l='ls -Av --color=auto --group-directories-first'
alias ll='ls -l --color=auto --group-directories-first'
alias la='ls -lAv --color=auto --group-directories-first'
alias lad='ls -d .*(/)'
alias lsa='ls -a .*(.)'
alias lsx='ls -l *(*)'
alias lsd='ls -d *(/)'

# COLORS ---------------------------------------------------------------------------------
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias diff='diff --color=auto'

# SHORTCUTS ------------------------------------------------------------------------------
alias ka='killall'
alias c='clear'
alias h='history'
alias j='jobs'
alias m='make'
alias rr='ranger'

# XCLIP ----------------------------------------------------------------------------------
alias setclip='xclip -sel clipboard -i'
alias getclip='xclip -sel clipboard -o'

# TMUX -----------------------------------------------------------------------------------
alias tm='tmux'
alias ts='tmux new-session -A -s'
alias tl='tmux ls'
function ta {
    if [[ -z "$1" ]]; then
        tmux attach
    else
        tmux attach -t "$1"
    fi
}

# DEV: CPP -------------------------------------------------------------------------------
alias g++='g++ -Wall -Wextra -Wshadow'
alias gcc='gcc -Wall -Wextra -Wshadow -pedantic'
alias clang++='clang++ -Wall -Wextra -Wpedantic'
alias clang='clang -Wall -Wextra -Wpedantic'
alias gdb='gdb -quiet'
alias demangle='c++filt -t'

# DEV: OTHER -----------------------------------------------------------------------------
alias py='python3.8'
alias sass='sassc'

# edit script
function es {
    if (( ARGC < 1 )); then
        echo 'usage: es <filename> [lang]' >&2
        return 1
    fi
    if [ -e "$1" ]; then
        if [ ! -f "$1" ]; then
            echo 'File exists, but is not a regular file' >&2
            return 1
        fi
    else
        if [ -z "$2" ]; then
            echo -e "#!/usr/bin/env bash\nset -eo pipefail\n" > "$1"
        else
            echo -e "#!/usr/bin/env $2\n" > "$1"
        fi
        chmod +x "$1"
    fi
    "$EDITOR" "$1"
}

# A/V ------------------------------------------------------------------------------------
alias ffmpeg='ffmpeg -hide_banner'
alias ffplay='ffplay -hide_banner'
alias ffprobe='ffprobe -hide_banner'
alias ytdl='youtube-dl'
alias ytdlu='pip install --upgrade youtube-dl'
alias ytmp3='youtube-dl -x -f bestaudio/best'

# VIM ------------------------------------------------------------------------------------
alias vgit='vim "+Gedit :"'
alias vim-install='vim "+au FileType vim-plug ++once only | set nonu nornu | bd#" +PlugInstall'
alias vim-update='vim "+au FileType vim-plug ++once only | set nonu nornu | bd#" +PlugUpdate'
alias vimclean='vim -u NORC --clean "+syntax off"'
alias :q='exit'
alias :e='vim'

# GIT ------------------------------------------------------------------------------------
function g {
    if [[ $# -eq 0 ]]; then
        git status
    else
        git $@
    fi
}
alias ga='git add'
alias gA='git add --all :/'
alias gc='git commit'
alias gcm='git commit -m'
alias gd='git diff'
alias gh='git stash'
alias ghl='git stash list'
alias gl='git l'
alias gl1='git --no-pager log -n 1'
alias gs='git status'
alias gP='git push'
alias gp='git pull'
function clone {
    if ! repo="$(echo "$1" | sed 's:.*/\(.*\)\.git:\1:')"; then
        echo 'failed to parse uri' >&2
        return 1
    fi
    if ! git clone "$1"; then
        echo 'failed to clone repo' >&2
        return 1
    fi
    if ! cd "$repo"; then
        echo 'directory not found' >&2
        return 1
    fi
    return 0
}

# APT ------------------------------------------------------------------------------------
alias ag='sudo apt-get'
alias ai='sudo apt-get install'
alias ar='sudo apt-get remove'
alias au='sudo apt-get update'
alias as='apt-cache search'
alias asn='apt-cache search --names-only'
alias ad='apt-cache depends'
alias adr='apt-cache rdepends'

# MISC -----------------------------------------------------------------------------------
alias ipinfo='curl ipinfo.io'
function unshorten {
    curl -s "https://linkunshorten.com/api/link?url=$1" | jq -M .
}

function rcd {
    if (( ARGC != 1 )); then
        echo 'usage: rcd <config>' >&2
        return 1
    fi
    cd "${$(rc -q "$1"):h}"
}

# ARCHIVES -------------------------------------------------------------------------------
function ex {
    if (( ARGC != 1 )); then
        echo 'usage: ex <file>' >&2
        return 1
    fi
    if [[ ! -f "$1" ]]; then
        echo "'$1' is not a valid file" >&2
        return 1
    fi
    case $1 in
        *.(tar.bz2|tbz2|tbz))
            tar -xvjf "$1" ;;
        *.(tar.gz|tgz))
            tar -xvzf "$1" ;;
        *.(tar.xz|txz))
            tar -xvJf "$1" ;;
        *.tar)
            tar -xvf "$1" ;;
        *.rar)
            unrar xv "$1" ;;
        *.7z)
            7z x "$1" ;;
        *.zip)
            unzip "$1" ;;
        *.bz2)
            bunzip2 -v "$1" ;;
        *.gz)
            gunzip -v "$1" ;;
        *.Z)
            uncompress -v "$1" ;;
        *)
            echo "'$1' cannot be extracted via ex()" >&2
            return 1
            ;;
    esac
}

function exl {
    if (( ARGC != 1 )); then
        echo 'usage: ex <file>' >&2
        return 1
    fi
    if [[ ! -f "$1" ]]; then
        echo "'$1' is not a valid file" >&2
        return 1
    fi
    case $1 in
        *.(tar.bz2|tbz2|tbz))
            tar -tvjf "$1" ;;
        *.(tar.gz|tgz))
            tar -tvzf "$1" ;;
        *.(tar.xz|txz))
            tar -tvJf "$1" ;;
        *.tar)
            tar -tvf "$1" ;;
        *.rar)
            unrar vl "$1" ;;
        *.7z)
            7z l "$1" ;;
        *.zip)
            unzip -l "$1" ;;
        *.bz2)
            bunzip2 -vt "$1" ;;
        *.gz)
            gunzip -vl "$1" ;;
        *.Z)
            uncompress -vl "$1" ;;
        *)
            echo "'$1' cannot be extracted via exl()" >&2
            return 1
            ;;
    esac
}
