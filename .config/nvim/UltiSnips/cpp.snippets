priority -50
extends c
priority -49

# PREPROCESSOR ---------------------------------------------------------------------------
snippet #< "#include angle brackets" b
#include <${1:iostream>}$0
endsnippet

snippet #" "#include double quotes" b
#include "${1:`!p snip.rv = '"' if not fn.endswith('.cpp') else fn.rsplit('.', 1)[0] + '.hpp"'`}$0
endsnippet

# MAIN -----------------------------------------------------------------------------------
snippet qmain "main function with QCoreApplication" b
#include <QCoreApplication>

int main(int argc, char* argv[])
{
	QCoreApplication app(argc, argv);
	${0}
	return app.exec();
}
endsnippet

snippet qmlmain "main function with QML" b
#include <QGuiApplication>
#include <QQmlApplicationEngine>

int main(int argc, char* argv[])
{
    QGuiApplication app(argc, argv);

    QQmlApplicationEngine engine;
    QQmlContext* ctx = engine.rootContext();

    const QUrl url(QStringLiteral("qrc:/main.qml"));
    QObject::connect(&engine, &QQmlApplicationEngine::objectCreated,
                     &app, [url](QObject *obj, const QUrl &objUrl) {
        if (!obj && url == objUrl)
            QCoreApplication::exit(-1);
    }, Qt::QueuedConnection);

    engine.load(url);

    return app.exec();
}
endsnippet

# DEFINITIONS ----------------------------------------------------------------------------
snippet s "struct definition"
struct ${1}
{
	${2}
};
endsnippet

snippet c "class definition"
class ${1}
{
	${2}
};
endsnippet

snippet q "QObject definition" b
class ${0} : public QObject
{
	Q_OBJECT
public:
private:
};
endsnippet

snippet ns "namespace"
namespace ${1} {

${2:${VISUAL}}

} // namespace $1
endsnippet

snippet fn "function"
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# BRANCHING ------------------------------------------------------------------------------
snippet try "try/catch"
try {
	${0:${VISUAL}}
} catch (const ${1:std::exception}& err) {
}
endsnippet

snippet it "for loop iterator"
for (auto ${2:it} = ${1:container}.begin(); $2 != $1.end(); ++$2) {
	${0:${VISUAL}}
}
endsnippet

snippet fore "for loop it"
for (const auto& ${2:item} : ${1:container}) {
	${0:${VISUAL}}
}
endsnippet

snippet ld "lambda" w
[${1}](${2}){${3}}
endsnippet

# SMART POINTERS -------------------------------------------------------------------------
snippet sp "std::shared_ptr" w
std::shared_ptr<${1:int}>${2}
endsnippet

snippet up "std::unique_ptr" w
std::unique_ptr<${1:int}>${2}
endsnippet

snippet mu "std::make_unique"
std::make_unique<${1:int}>(${2})${3}
endsnippet

snippet ms "std::make_shared"
std::make_shared<${1:int}>(${2})${3}
endsnippet

# COMMON CLASSES -------------------------------------------------------------------------
snippet vec "std::vector" w
std::vector<${1:int}>$0
endsnippet

snippet cvec "const std::vector&" w
const std::vector<${1:int}>&$0
endsnippet

snippet str "std::string" w
std::string
endsnippet

snippet cstr "const std::string&" w
const std::string&
endsnippet

snippet qs "QString" w
QString
endsnippet

snippet cqs "const QString&" w
const QString&
endsnippet

snippet ul "std::unique_lock"
std::unique_lock<${2:std::mutex}> ${3:lock}(${1:mutex});
$0
endsnippet

snippet cr "const reference" i
const ${1:${VISUAL}}&$0
endsnippet

# CASTS ----------------------------------------------------------------------------------
snippet sc "static cast" w
static_cast<${1:int}>(${2:expr})${3}
endsnippet

snippet rc "reinterpret cast" w
reinterpret_cast<${1:int}>(${2:expr})${3}
endsnippet

snippet dc "dynamic cast" w
dynamic_cast<${1:int}>(${2:expr})${3}
endsnippet

snippet qc "qobject cast" w
qobject_cast<${1:QObject}*>(${2:expr})${3}
endsnippet
