priority -50
extends c
priority -49

# Preprocessor ---------------------------------------------------------------------------
snippet #i "#include"
#include <${1:iostream}>
endsnippet

# C++ ------------------------------------------------------------------------------------
snippet main "main function"
int main(int argc, char* argv[])
{
	${0}
}
endsnippet

snippet mainn "main function no arguments"
int main()
{
	${0}
}
endsnippet

snippet fun "function"
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

snippet s "struct"
struct ${1}
{
	${2}
};
endsnippet

snippet c "class"
class ${1}
{
	${2}
};
endsnippet

snippet ns "namespace"
namespace ${1} {

${2:${VISUAL}}

} // namespace $1
endsnippet

snippet if "if"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if/else"
if (${1:true}) {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet elif "else if"
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet try "try/catch"
try {
	${0:${VISUAL}}
} catch (const ${1:std::exception}& err) {
}
endsnippet

snippet ld "lambda"
[${1}](${2}){${3}}
endsnippet

snippet fori "for loop"
for (int ${2:i} = 0; $2 < ${1:count}; ++$2) {
}
endsnippet

snippet it "for loop iterator"
for (auto ${2:it} = ${1:container}.begin(); $2 != $1.end(); ++$2) {
}
endsnippet

snippet sc "static cast"
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet rc "reinterpret cast"
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet dc "dynamic cast"
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet sp "shared pointer"
std::shared_ptr<${1:unsigned}>${2}
endsnippet

snippet up "unique pointer"
std::unique_ptr<${1:unsigned}>${2}
endsnippet

snippet mu "make shared pointer"
std::make_unique<${1:unsigned}>(${2})${3}
endsnippet

snippet ms "make unique pointer"
std::make_shared<${1:unsigned}>(${2})${3}
endsnippet

# Qt -------------------------------------------------------------------------------------
snippet qobj "QObject definition"
class ${0} : public QObject
{
	Q_OBJECT
public:
private:
};
endsnippet

snippet qapp "QApplication main function"
int main(int argc, char* argv[])
{
	QCoreApplication app(argc, argv);
	${0}
	return app.exec();
}
endsnippet

snippet qc "qobject cast"
qobject_cast<${1:QObject}*>(${2:expr})${3}
endsnippet
